// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHQW2pvgnMYkU9Giixod5o
// Component: dU2F-isDdg3b

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsgt9QMo0RuEb7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GT9qMO0RUEb7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: uHQW2pvgnMYkU9Giixod5o/projectcss
import sty from "./PlasmicCartItem.module.css"; // plasmic-import: dU2F-isDdg3b/css

import RecycleIcon from "./icons/PlasmicIcon__Recycle"; // plasmic-import: _iSh-o7sXn0v/icon
import Secure2Icon from "./icons/PlasmicIcon__Secure2"; // plasmic-import: LoQJMOxcwTR6/icon

createPlasmicElementProxy;

export type PlasmicCartItem__VariantMembers = {};
export type PlasmicCartItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicCartItem__VariantsArgs;
export const PlasmicCartItem__VariantProps = new Array<VariantPropType>();

export type PlasmicCartItem__ArgsType = {
  itemImg?: React.ComponentProps<typeof PlasmicImg__>["src"];
  title?: React.ReactNode;
  productNumber?: React.ReactNode;
  size?: React.ReactNode;
  quantity?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCartItem__ArgsType;
export const PlasmicCartItem__ArgProps = new Array<ArgPropType>(
  "itemImg",
  "title",
  "productNumber",
  "size",
  "quantity"
);

export type PlasmicCartItem__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultCartItemProps {
  itemImg?: React.ComponentProps<typeof PlasmicImg__>["src"];
  title?: React.ReactNode;
  productNumber?: React.ReactNode;
  size?: React.ReactNode;
  quantity?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCartItem__RenderFunc(props: {
  variants: PlasmicCartItem__VariantsArgs;
  args: PlasmicCartItem__ArgsType;
  overrides: PlasmicCartItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          itemImg: {
            src: "/plasmic/commerce_storefront/images/shoe23.png",
            fullWidth: 450,
            fullHeight: 450,
            aspectRatio: undefined
          }
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgt9QMo0RuEb7()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"200px"}
        src={args.itemImg}
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__n6S4P)}
      >
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          platform={"nextjs"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pef4F)}>
            {renderPlasmicSlot({
              defaultContents: "Some Title",
              value: args.title,
              className: classNames(sty.slotTargetTitle)
            })}
          </div>
        </PlasmicLink__>
        <div className={classNames(projectcss.all, sty.freeBox__mym4L)}>
          {renderPlasmicSlot({
            defaultContents: "#00000",
            value: args.productNumber,
            className: classNames(sty.slotTargetProductNumber)
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__nOubE)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ajraV
            )}
          >
            {"Size: "}
          </div>
          {renderPlasmicSlot({
            defaultContents: "11",
            value: args.size
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___6Adte)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__duLm6
            )}
          >
            {"Quantity: "}
          </div>
          {renderPlasmicSlot({
            defaultContents: "1",
            value: args.quantity
          })}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u8ATg)}
        >
          <RecycleIcon
            className={classNames(projectcss.all, sty.svg__elQrq)}
            role={"img"}
          />

          <Secure2Icon
            className={classNames(projectcss.all, sty.svg__vrPi)}
            role={"img"}
          />
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "link"],
  img: ["img"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCartItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCartItem__VariantsArgs;
    args?: PlasmicCartItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCartItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCartItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCartItem__ArgProps,
          internalVariantPropNames: PlasmicCartItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCartItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCartItem";
  } else {
    func.displayName = `PlasmicCartItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCartItem = Object.assign(
  // Top-level PlasmicCartItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicCartItem
    internalVariantProps: PlasmicCartItem__VariantProps,
    internalArgProps: PlasmicCartItem__ArgProps
  }
);

export default PlasmicCartItem;
/* prettier-ignore-end */
