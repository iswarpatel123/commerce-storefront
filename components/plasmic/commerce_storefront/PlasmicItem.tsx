// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHQW2pvgnMYkU9Giixod5o
// Component: p-OC5atrRNhy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ProductBox } from "@plasmicpkgs/commerce";
import PaheHeaderMenuTextDark from "../../PaheHeaderMenuTextDark"; // plasmic-import: m_NOfYzJsA9O/component
import { CategoryCollection } from "@plasmicpkgs/commerce";
import { CategoryField } from "@plasmicpkgs/commerce";
import { ProductMedia } from "@plasmicpkgs/commerce";
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import { ProductVariantPicker } from "@plasmicpkgs/commerce";
import { ProductQuantity } from "@plasmicpkgs/commerce";
import Select from "../../Select"; // plasmic-import: _pVPrn90J2P_/component
import Select__Option from "../../Select__Option"; // plasmic-import: 4wjxvubaGOrG/component
import Button from "../../Button"; // plasmic-import: JwPscNc0nKNr/component
import { AddToCartButton } from "@plasmicpkgs/commerce";
import { CartComponent } from "@plasmicpkgs/commerce";
import { ProductCollection } from "@plasmicpkgs/commerce";
import ProductMain from "../../ProductMain"; // plasmic-import: ayrlMeEPbN2C/component
import ShopingSection from "../../ShopingSection"; // plasmic-import: PJKGmjlyXMJV/component
import Instagram from "../../Instagram"; // plasmic-import: ZmBvv8sxrP0d/component
import Footer from "../../Footer"; // plasmic-import: nFcd2pXWxj3u/component

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: iXXrGrNyxZg5/globalVariant
import { useScreenVariants as useScreenVariantsgt9QMo0RuEb7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GT9qMO0RUEb7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: uHQW2pvgnMYkU9Giixod5o/projectcss
import sty from "./PlasmicItem.module.css"; // plasmic-import: p-OC5atrRNhy/css

import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: cX3AP2P4DPgZ/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: QjmCW-jv-Wiw/icon
import FullStarIcon from "./icons/PlasmicIcon__FullStar"; // plasmic-import: 2puPHssciAxd/icon
import HalfStarIcon from "./icons/PlasmicIcon__HalfStar"; // plasmic-import: pyU_-8xI6a7q/icon
import EmptyStarIcon from "./icons/PlasmicIcon__EmptyStar"; // plasmic-import: CHl_eUZzQaRd/icon

createPlasmicElementProxy;

export type PlasmicItem__VariantMembers = {};
export type PlasmicItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicItem__VariantsArgs;
export const PlasmicItem__VariantProps = new Array<VariantPropType>();

export type PlasmicItem__ArgsType = {};
type ArgPropType = keyof PlasmicItem__ArgsType;
export const PlasmicItem__ArgProps = new Array<ArgPropType>();

export type PlasmicItem__OverridesType = {
  root?: Flex__<"div">;
  productBox?: Flex__<typeof ProductBox>;
  paheHeaderMenuTextDark?: Flex__<typeof PaheHeaderMenuTextDark>;
  categoryCollection?: Flex__<typeof CategoryCollection>;
  categoryField?: Flex__<typeof CategoryField>;
  h2?: Flex__<"h2">;
  h5?: Flex__<"h5">;
  productPrice?: Flex__<typeof ProductPriceComponent>;
  productVariantPicker?: Flex__<typeof ProductVariantPicker>;
  productQuantity?: Flex__<typeof ProductQuantity>;
  quantity?: Flex__<typeof Select>;
  likeButton?: Flex__<typeof Button>;
  addToCartButton?: Flex__<typeof AddToCartButton>;
  button?: Flex__<"button">;
  description4?: Flex__<typeof Select>;
  description3?: Flex__<typeof Select>;
  description2?: Flex__<typeof Select>;
  cart?: Flex__<typeof CartComponent>;
  productCollection?: Flex__<typeof ProductCollection>;
  productMain?: Flex__<typeof ProductMain>;
  shopingSection?: Flex__<typeof ShopingSection>;
  instagram?: Flex__<typeof Instagram>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultItemProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItem__RenderFunc(props: {
  variants: PlasmicItem__VariantsArgs;
  args: PlasmicItem__ArgsType;
  overrides: PlasmicItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "quantity.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "description4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "description3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "description2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsgt9QMo0RuEb7()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicItem.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicItem.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicItem.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicItem.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicItem.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicItem.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            id={"eternity-nitro-mens-running-shoes"}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <PaheHeaderMenuTextDark
                    data-plasmic-name={"paheHeaderMenuTextDark"}
                    data-plasmic-override={overrides.paheHeaderMenuTextDark}
                    className={classNames(
                      "__wab_instance",
                      sty.paheHeaderMenuTextDark,
                      {
                        [sty.paheHeaderMenuTextDarkglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants",
                            "unnamedVariant"
                          )
                      }
                    )}
                  />

                  <section
                    className={classNames(projectcss.all, sty.section__fq8Os)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__gZhz5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__uekZh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__eyig8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__tq3U
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__sXkkw,
                                {
                                  [sty.h4global_unnamedGlobalGroupOfVariants_unnamedVariant__sXkkwHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {"Products"}
                            </h4>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___66Tnl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bpTwh
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__lYmuz
                                  )}
                                >
                                  <CategoryCollection
                                    data-plasmic-name={"categoryCollection"}
                                    data-plasmic-override={
                                      overrides.categoryCollection
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.categoryCollection
                                    )}
                                    emptyMessage={
                                      <DataCtxReader__>
                                        {$ctx => (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rAo8N
                                            )}
                                          >
                                            {"No collection found!"}
                                          </div>
                                        )}
                                      </DataCtxReader__>
                                    }
                                    loadingMessage={
                                      <DataCtxReader__>
                                        {$ctx => (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__tdi8F
                                            )}
                                          >
                                            {"Loading..."}
                                          </div>
                                        )}
                                      </DataCtxReader__>
                                    }
                                    noLayout={false}
                                  >
                                    <DataCtxReader__>
                                      {$ctx => (
                                        <h4
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h4,
                                            sty.h4__aTyo2
                                          )}
                                        >
                                          <CategoryField
                                            data-plasmic-name={"categoryField"}
                                            data-plasmic-override={
                                              overrides.categoryField
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.categoryField
                                            )}
                                            field={"name"}
                                          />
                                        </h4>
                                      )}
                                    </DataCtxReader__>
                                  </CategoryCollection>
                                </Stack__>
                              </div>
                            </div>
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.column__xuV4
                            )}
                          >
                            <ProductMedia
                              className={classNames(
                                "__wab_instance",
                                sty.productMedia__owAKz
                              )}
                            />

                            <ProductMedia
                              className={classNames(
                                "__wab_instance",
                                sty.productMedia__iLk4
                              )}
                              mediaIndex={1}
                            />

                            <ProductMedia
                              className={classNames(
                                "__wab_instance",
                                sty.productMedia__rIkpX
                              )}
                              mediaIndex={2}
                            />
                          </Stack__>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__fGo3M
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i4JbB
                          )}
                        >
                          <ProductMedia
                            className={classNames(
                              "__wab_instance",
                              sty.productMedia__dU80Q
                            )}
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pKcKm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xbbjc
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__vw1RZ
                                )}
                                mediaIndex={1}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oBioK
                              )}
                            >
                              <ProductMedia
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMedia__ljYjQ
                                )}
                                mediaIndex={2}
                              />
                            </div>
                          </Stack__>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___8EpPt,
                          {
                            [sty.columnglobal_unnamedGlobalGroupOfVariants_unnamedVariant___8EpPtHpfdl]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wEcZr,
                            {
                              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__wEcZrhpfdl]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <h2
                            data-plasmic-name={"h2"}
                            data-plasmic-override={overrides.h2}
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              sty.h2
                            )}
                          >
                            <ProductTextField
                              className={classNames(
                                "__wab_instance",
                                sty.productTextField__o6Of0
                              )}
                              field={"name"}
                            />
                          </h2>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bfaGj
                            )}
                          >
                            <h5
                              data-plasmic-name={"h5"}
                              data-plasmic-override={overrides.h5}
                              className={classNames(
                                projectcss.all,
                                projectcss.h5,
                                sty.h5
                              )}
                            >
                              <ProductPriceComponent
                                data-plasmic-name={"productPrice"}
                                data-plasmic-override={overrides.productPrice}
                                className={classNames(
                                  "__wab_instance",
                                  sty.productPrice
                                )}
                              />
                            </h5>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mGhZy
                            )}
                          >
                            <ProductTextField
                              className={classNames(
                                "__wab_instance",
                                sty.productTextField__i5QuP
                              )}
                              field={"description"}
                            />
                          </Stack__>
                          <ProductVariantPicker
                            data-plasmic-name={"productVariantPicker"}
                            data-plasmic-override={
                              overrides.productVariantPicker
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.productVariantPicker
                            )}
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___2Wz7S
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xxcmf
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__veD5E
                                )}
                              >
                                {"Quantity"}
                              </h3>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__y7Fz6
                                )}
                              >
                                <ProductQuantity
                                  data-plasmic-name={"productQuantity"}
                                  data-plasmic-override={
                                    overrides.productQuantity
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productQuantity
                                  )}
                                >
                                  <Select
                                    data-plasmic-name={"quantity"}
                                    data-plasmic-override={overrides.quantity}
                                    name={""}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "quantity",
                                        "value"
                                      ])(eventArgs[0]);
                                    }}
                                    selectedContent2={""}
                                    value={generateStateValueProp($state, [
                                      "quantity",
                                      "value"
                                    ])}
                                  >
                                    <Select__Option
                                      className={classNames(
                                        "__wab_instance",
                                        sty.option__eVwtY
                                      )}
                                      value={"1"}
                                    >
                                      {"1"}
                                    </Select__Option>
                                    <Select__Option
                                      className={classNames(
                                        "__wab_instance",
                                        sty.option__iIoC1
                                      )}
                                      value={"2"}
                                    >
                                      {"2"}
                                    </Select__Option>
                                    <Select__Option
                                      className={classNames(
                                        "__wab_instance",
                                        sty.option__efwUg
                                      )}
                                      value={"3"}
                                    >
                                      {"3"}
                                    </Select__Option>
                                    <Select__Option
                                      className={classNames(
                                        "__wab_instance",
                                        sty.option__wu2AW
                                      )}
                                      value={"4"}
                                    >
                                      {"4"}
                                    </Select__Option>
                                    <Select__Option
                                      className={classNames(
                                        "__wab_instance",
                                        sty.option__bfJcd
                                      )}
                                      value={"5"}
                                    >
                                      {"5"}
                                    </Select__Option>
                                  </Select>
                                </ProductQuantity>
                                <Button
                                  data-plasmic-name={"likeButton"}
                                  data-plasmic-override={overrides.likeButton}
                                  colors={"lightGrayOutline"}
                                  iconOnly={true}
                                  size={"large"}
                                  startIcon={
                                    <LikeIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__gTaIe
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  submitsForm={true}
                                />

                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mVoPq
                                  )}
                                >
                                  <AddToCartButton
                                    data-plasmic-name={"addToCartButton"}
                                    data-plasmic-override={
                                      overrides.addToCartButton
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.addToCartButton
                                    )}
                                  >
                                    <button
                                      data-plasmic-name={"button"}
                                      data-plasmic-override={overrides.button}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.button,
                                        projectcss.__wab_text,
                                        sty.button
                                      )}
                                    >
                                      {"Add to cart "}
                                    </button>
                                  </AddToCartButton>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__axfW
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__iZcOy
                              )}
                            >
                              <Select
                                data-plasmic-name={"description4"}
                                data-plasmic-override={overrides.description4}
                                className={classNames(
                                  "__wab_instance",
                                  sty.description4,
                                  {
                                    [sty.description4global_unnamedGlobalGroupOfVariants_unnamedVariant]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                                name={""}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "description4",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                placeholder={
                                  <h6
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h6,
                                      projectcss.__wab_text,
                                      sty.h6__znxeM
                                    )}
                                  >
                                    {"Shipping and returns"}
                                  </h6>
                                }
                                value={generateStateValueProp($state, [
                                  "description4",
                                  "value"
                                ])}
                              >
                                <Select__Option
                                  className={classNames(
                                    "__wab_instance",
                                    sty.option__nHDgJ
                                  )}
                                  value={"value1"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__zmbJm
                                    )}
                                  >
                                    {"Option 1"}
                                  </div>
                                </Select__Option>
                                <Select__Option
                                  className={classNames(
                                    "__wab_instance",
                                    sty.option__w4Y3S
                                  )}
                                  value={"value2"}
                                >
                                  {"Option 2"}
                                </Select__Option>
                              </Select>
                              <Select
                                data-plasmic-name={"description3"}
                                data-plasmic-override={overrides.description3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.description3,
                                  {
                                    [sty.description3global_unnamedGlobalGroupOfVariants_unnamedVariant]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                                name={""}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "description3",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                placeholder={
                                  <h6
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h6,
                                      projectcss.__wab_text,
                                      sty.h6__ikk4X
                                    )}
                                  >
                                    {"Details"}
                                  </h6>
                                }
                                value={generateStateValueProp($state, [
                                  "description3",
                                  "value"
                                ])}
                              >
                                <Select__Option
                                  className={classNames(
                                    "__wab_instance",
                                    sty.option__ic5W6
                                  )}
                                  value={"value1"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nfYUv
                                    )}
                                  >
                                    {"Option 1"}
                                  </div>
                                </Select__Option>
                                <Select__Option
                                  className={classNames(
                                    "__wab_instance",
                                    sty.option__zwJx
                                  )}
                                  value={"value2"}
                                >
                                  {"Option 2"}
                                </Select__Option>
                              </Select>
                              {(
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                                  ? true
                                  : false
                              ) ? (
                                <Select
                                  data-plasmic-name={"description2"}
                                  data-plasmic-override={overrides.description2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.description2,
                                    {
                                      [sty.description2global_unnamedGlobalGroupOfVariants_unnamedVariant]:
                                        hasVariant(
                                          globalVariants,
                                          "unnamedGlobalGroupOfVariants",
                                          "unnamedVariant"
                                        )
                                    }
                                  )}
                                  name={""}
                                  onChange={(...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "description2",
                                      "value"
                                    ])(eventArgs[0]);
                                  }}
                                  placeholder={"Details"}
                                  value={generateStateValueProp($state, [
                                    "description2",
                                    "value"
                                  ])}
                                >
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__nnst
                                    )}
                                    value={"value1"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__btHte
                                      )}
                                    >
                                      {"Option 1"}
                                    </div>
                                  </Select__Option>
                                  <Select__Option
                                    className={classNames(
                                      "__wab_instance",
                                      sty.option__pr8Zv
                                    )}
                                    value={"value2"}
                                  >
                                    {"Option 2"}
                                  </Select__Option>
                                </Select>
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                        <CartComponent
                          data-plasmic-name={"cart"}
                          data-plasmic-override={overrides.cart}
                          className={classNames("__wab_instance", sty.cart)}
                          hideIfIsEmpty={false}
                        />
                      </div>
                    </Stack__>
                  </section>
                  <Stack__
                    as={"section"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.section__yh62D, {
                      [sty.sectionglobal_unnamedGlobalGroupOfVariants_unnamedVariant__yh62DHpfdl]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    })}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__pmrFc,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__pmrFcHpfdl]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__zfKnX,
                          {
                            [sty.h3global_unnamedGlobalGroupOfVariants_unnamedVariant__zfKnXhpfdl]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        {"4.3 stars from 10 reviews"}
                      </h3>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rV8Bi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__iOpF,
                          {
                            [sty.columnsglobal_unnamedGlobalGroupOfVariants_unnamedVariant__iOpFHpfdl]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__xaGwp,
                            {
                              [sty.columnglobal_unnamedGlobalGroupOfVariants_unnamedVariant__xaGwpHpfdl]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dr28Y,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__dr28Yhpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__niuWt
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rHWee
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gngXr
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lwnep
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hwvJu
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7RnLr,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant___7RnLrHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "5/5"}
                            </div>
                          </div>
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__wRCfw,
                              {
                                [sty.h4global_unnamedGlobalGroupOfVariants_unnamedVariant__wRCfwHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Perfect"}
                          </h4>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6___43O2J,
                              {
                                [sty.h6global_unnamedGlobalGroupOfVariants_unnamedVariant___43O2JHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? "Great fit and feel. They elevate lounging to the next level!"
                              : "Great fit and feel. They elevate lounging to the next level!"}
                          </h6>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__y2CZd,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__y2CZdHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gc0T,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__gc0Thpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "Heidi C. | December, 2019"}
                            </div>
                          </div>
                          {(
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ltRwq,
                                {
                                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__ltRwqHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gxWr,
                                  {
                                    [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__gxWrhpfdl]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                              >
                                {"Heidi C. | December, 2019"}
                              </div>
                            </div>
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__vwj24,
                            {
                              [sty.columnglobal_unnamedGlobalGroupOfVariants_unnamedVariant__vwj24Hpfdl]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tsonj,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__tsonjHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nhZq8
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__b6NJx
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lfnUq
                              )}
                              role={"img"}
                            />

                            <HalfStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mpZj7
                              )}
                              role={"img"}
                            />

                            <EmptyStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ivx4U
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__z6S3P,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__z6S3Phpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "3.5/5"}
                            </div>
                          </div>
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__bTte9,
                              {
                                [sty.h4global_unnamedGlobalGroupOfVariants_unnamedVariant__bTte9Hpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"So comfortable!"}
                          </h4>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__hn3S,
                              {
                                [sty.h6global_unnamedGlobalGroupOfVariants_unnamedVariant__hn3Shpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? "Great fit and feel. They elevate lounging to the next level!"
                              : "I sized up just in case and kind of wished I hadn\u2019t. Very comfortable and I live in them exclusively during the weekend."}
                          </h6>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4W4Cw,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant___4W4CwHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zUzjj,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__zUzjjhpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "Heidi C. | December, 2019"}
                            </div>
                          </div>
                          {(
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__taWYt,
                                {
                                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__taWYtHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lQpAi,
                                  {
                                    [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__lQpAiHpfdl]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                              >
                                {"Heidi C. | December, 2019"}
                              </div>
                            </div>
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__kSGhT,
                            {
                              [sty.columnglobal_unnamedGlobalGroupOfVariants_unnamedVariant__kSGhThpfdl]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wfFSr,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__wfFSrHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ftpdx
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zL51M
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mlZff
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hM3QI
                              )}
                              role={"img"}
                            />

                            <EmptyStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gb1Fd
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jJsTx,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__jJsTxHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "4/5"}
                            </div>
                          </div>
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__l2VfP,
                              {
                                [sty.h4global_unnamedGlobalGroupOfVariants_unnamedVariant__l2VfPhpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"Comfy but thin"}
                          </h4>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__wWsr5,
                              {
                                [sty.h6global_unnamedGlobalGroupOfVariants_unnamedVariant__wWsr5Hpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? "Great fit and feel. They elevate lounging to the next level!"
                              : "Comfortable but kinda thin for a pant. I typically wear a 32/33 pant and had to size up to XL for these to not fit like a legging. Have been wearing pretty solid for a month of so and there's some pilling, but not a lot. Good price for OK product."}
                          </h6>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vqcMd,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__vqcMdhpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uy38K,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__uy38KHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "Heidi C. | December, 2019"}
                            </div>
                          </div>
                          {(
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aUqZq,
                                {
                                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__aUqZqHpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oLca1,
                                  {
                                    [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__oLca1Hpfdl]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                              >
                                {"Heidi C. | December, 2019"}
                              </div>
                            </div>
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__quqWh,
                            {
                              [sty.columnglobal_unnamedGlobalGroupOfVariants_unnamedVariant__quqWhhpfdl]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bdE2G,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__bdE2Ghpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tnPdc
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zmQjW
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8KhKw
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__k6P2H
                              )}
                              role={"img"}
                            />

                            <FullStarIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zf6Ec
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Zzo2,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant___9Zzo2Hpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "5/5"}
                            </div>
                          </div>
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__mw13M,
                              {
                                [sty.h4global_unnamedGlobalGroupOfVariants_unnamedVariant__mw13MHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {"So comfortable!"}
                          </h4>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__oMov,
                              {
                                [sty.h6global_unnamedGlobalGroupOfVariants_unnamedVariant__oMovhpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? "Great fit and feel. They elevate lounging to the next level!"
                              : "I sized up just in case and kind of wished I hadn\u2019t. Very comfortable and I live in them exclusively during the weekend."}
                          </h6>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9GtIi,
                              {
                                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant___9GtIiHpfdl]:
                                  hasVariant(
                                    globalVariants,
                                    "unnamedGlobalGroupOfVariants",
                                    "unnamedVariant"
                                  )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fIunN,
                                {
                                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__fIunNhpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                                ? " 5/5"
                                : "Heidi C. | December, 2019"}
                            </div>
                          </div>
                          {(
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__d10Je,
                                {
                                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__d10Jehpfdl]:
                                    hasVariant(
                                      globalVariants,
                                      "unnamedGlobalGroupOfVariants",
                                      "unnamedVariant"
                                    )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6J8Oe,
                                  {
                                    [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant___6J8Oehpfdl]:
                                      hasVariant(
                                        globalVariants,
                                        "unnamedGlobalGroupOfVariants",
                                        "unnamedVariant"
                                      )
                                  }
                                )}
                              >
                                {"Heidi C. | December, 2019"}
                              </div>
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__sj9Bh,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__sj9BhHpfdl]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__d2Rkt,
                          {
                            [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__d2RktHpfdl]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                          }
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"View all reviews"}
                      </PlasmicLink__>
                    </Stack__>
                    {(
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants",
                        "unnamedVariant"
                      )
                        ? true
                        : false
                    ) ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wn8Ja,
                          {
                            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__wn8Jahpfdl]:
                              hasVariant(
                                globalVariants,
                                "unnamedGlobalGroupOfVariants",
                                "unnamedVariant"
                              )
                          }
                        )}
                      >
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__aQn8I,
                            {
                              [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__aQn8IHpfdl]:
                                hasVariant(
                                  globalVariants,
                                  "unnamedGlobalGroupOfVariants",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {"View all reviews"}
                        </PlasmicLink__>
                      </Stack__>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"section"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.section__vh1Ss)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__q56Vb,
                        {
                          [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__q56VbHpfdl]:
                            hasVariant(
                              globalVariants,
                              "unnamedGlobalGroupOfVariants",
                              "unnamedVariant"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oVzE
                        )}
                      >
                        {"Suggested products"}
                      </div>
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__xhM3A
                        )}
                      >
                        {"You may also like to check out these products."}
                      </h3>
                      <ProductCollection
                        data-plasmic-name={"productCollection"}
                        data-plasmic-override={overrides.productCollection}
                        className={classNames(
                          "__wab_instance",
                          sty.productCollection
                        )}
                        count={4}
                        emptyMessage={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__w5VQu
                                )}
                              >
                                {"No product found!"}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        loadingMessage={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qWHdw
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                        sort={"latest-desc"}
                      >
                        <DataCtxReader__>
                          {$ctx => (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xpx5L
                              )}
                            >
                              <ProductMain
                                data-plasmic-name={"productMain"}
                                data-plasmic-override={overrides.productMain}
                                className={classNames(
                                  "__wab_instance",
                                  sty.productMain
                                )}
                              />
                            </div>
                          )}
                        </DataCtxReader__>
                      </ProductCollection>
                    </Stack__>
                  </Stack__>
                  <ShopingSection
                    data-plasmic-name={"shopingSection"}
                    data-plasmic-override={overrides.shopingSection}
                    className={classNames("__wab_instance", sty.shopingSection)}
                  />

                  <Instagram
                    data-plasmic-name={"instagram"}
                    data-plasmic-override={overrides.instagram}
                    className={classNames("__wab_instance", sty.instagram)}
                  />

                  <Footer
                    data-plasmic-name={"footer"}
                    data-plasmic-override={overrides.footer}
                    className={classNames("__wab_instance", sty.footer, {
                      [sty.footerglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    })}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </ProductBox>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "productBox",
    "paheHeaderMenuTextDark",
    "categoryCollection",
    "categoryField",
    "h2",
    "h5",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "quantity",
    "likeButton",
    "addToCartButton",
    "button",
    "description4",
    "description3",
    "description2",
    "cart",
    "productCollection",
    "productMain",
    "shopingSection",
    "instagram",
    "footer"
  ],
  productBox: [
    "productBox",
    "paheHeaderMenuTextDark",
    "categoryCollection",
    "categoryField",
    "h2",
    "h5",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "quantity",
    "likeButton",
    "addToCartButton",
    "button",
    "description4",
    "description3",
    "description2",
    "cart",
    "productCollection",
    "productMain",
    "shopingSection",
    "instagram",
    "footer"
  ],
  paheHeaderMenuTextDark: ["paheHeaderMenuTextDark"],
  categoryCollection: ["categoryCollection", "categoryField"],
  categoryField: ["categoryField"],
  h2: ["h2"],
  h5: ["h5", "productPrice"],
  productPrice: ["productPrice"],
  productVariantPicker: ["productVariantPicker"],
  productQuantity: ["productQuantity", "quantity"],
  quantity: ["quantity"],
  likeButton: ["likeButton"],
  addToCartButton: ["addToCartButton", "button"],
  button: ["button"],
  description4: ["description4"],
  description3: ["description3"],
  description2: ["description2"],
  cart: ["cart"],
  productCollection: ["productCollection", "productMain"],
  productMain: ["productMain"],
  shopingSection: ["shopingSection"],
  instagram: ["instagram"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  productBox: typeof ProductBox;
  paheHeaderMenuTextDark: typeof PaheHeaderMenuTextDark;
  categoryCollection: typeof CategoryCollection;
  categoryField: typeof CategoryField;
  h2: "h2";
  h5: "h5";
  productPrice: typeof ProductPriceComponent;
  productVariantPicker: typeof ProductVariantPicker;
  productQuantity: typeof ProductQuantity;
  quantity: typeof Select;
  likeButton: typeof Button;
  addToCartButton: typeof AddToCartButton;
  button: "button";
  description4: typeof Select;
  description3: typeof Select;
  description2: typeof Select;
  cart: typeof CartComponent;
  productCollection: typeof ProductCollection;
  productMain: typeof ProductMain;
  shopingSection: typeof ShopingSection;
  instagram: typeof Instagram;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItem__VariantsArgs;
    args?: PlasmicItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItem__ArgProps,
          internalVariantPropNames: PlasmicItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItem";
  } else {
    func.displayName = `PlasmicItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItem = Object.assign(
  // Top-level PlasmicItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productBox: makeNodeComponent("productBox"),
    paheHeaderMenuTextDark: makeNodeComponent("paheHeaderMenuTextDark"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryField: makeNodeComponent("categoryField"),
    h2: makeNodeComponent("h2"),
    h5: makeNodeComponent("h5"),
    productPrice: makeNodeComponent("productPrice"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    productQuantity: makeNodeComponent("productQuantity"),
    quantity: makeNodeComponent("quantity"),
    likeButton: makeNodeComponent("likeButton"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    button: makeNodeComponent("button"),
    description4: makeNodeComponent("description4"),
    description3: makeNodeComponent("description3"),
    description2: makeNodeComponent("description2"),
    cart: makeNodeComponent("cart"),
    productCollection: makeNodeComponent("productCollection"),
    productMain: makeNodeComponent("productMain"),
    shopingSection: makeNodeComponent("shopingSection"),
    instagram: makeNodeComponent("instagram"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicItem
    internalVariantProps: PlasmicItem__VariantProps,
    internalArgProps: PlasmicItem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Item",
      description:
        "Nunc parturient ultricies condimentum parturient sagittis urna mus conubia himenaeos fermentum leo mus dignissim pulvinar blandit porta eget ad.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicItem;
/* prettier-ignore-end */
